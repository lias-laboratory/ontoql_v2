/*********************************************************************************
 * This file is part of MariusQL Project.
 * Copyright (C) 2014  LIAS - ENSMA
 *   Teleport 2 - 1 avenue Clement Ader
 *   BP 40109 - 86961 Futuroscope Chasseneuil Cedex - FRANCE
 * 
 * MariusQL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MariusQL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with MariusQL.  If not, see <http://www.gnu.org/licenses/>.
 **********************************************************************************/
package fr.ensma.lias.mariusql.engine;

import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;

import antlr.RecognitionException;
import antlr.TokenStream;
import antlr.collections.AST;
import fr.ensma.lias.mariusql.engine.antlr.SPARQLBaseParser;
import fr.ensma.lias.mariusql.engine.util.ASTPrinter;
import fr.ensma.lias.mariusql.engine.util.ErrorCounter;
import fr.ensma.lias.mariusql.engine.util.ParseErrorHandler;
import fr.ensma.lias.mariusql.exception.NotYetImplementedException;

/**
 * Implements the semantic action methods defined in the SPARQL base parser to
 * keep the grammar source file a little cleaner. Extends the parser class
 * generated by ANTLR.
 * 
 * @author Stephane JEAN, Mickael BARON and Raoul TIAM
 */
public final class SPARQLParser extends SPARQLBaseParser {

	/**
	 * An handler of errors.
	 */
	private ParseErrorHandler parseErrorHandler;

	/**
	 * A printer of Trees.
	 */
	private ASTPrinter printer = getASTPrinter();

	/**
	 * Get a printer of trees.
	 * 
	 * @return a printer of trees
	 */
	private static ASTPrinter getASTPrinter() {
		return new ASTPrinter(fr.ensma.lias.mariusql.engine.antlr.SPARQLTokenTypes.class);
	}

	/**
	 * Singleton method to get the instance of OntoQLParser.
	 * 
	 * @param ontoql An OntoQL query to parse
	 * @return A parser for this query
	 */
	public static SPARQLParser getInstance(final String ontoql) {
		SPARQLLexer lexer = new SPARQLLexer(new StringReader(ontoql));
		return new SPARQLParser(lexer);
	}

	/**
	 * Internal constructor with a lexer.
	 * 
	 * @param lexer A lexer to get the tokens
	 */
	private SPARQLParser(final TokenStream lexer) {
		super(lexer);
		initialize();
	}

	@Override
	public void reportError(final RecognitionException e) {
		parseErrorHandler.reportError(e); // Use the delegate.
	}

	@Override
	public void reportError(final String s) {
		parseErrorHandler.reportError(s); // Use the delegate.
	}

	@Override
	public void reportWarning(final String s) {
		parseErrorHandler.reportWarning(s);
	}

	/**
	 * Get an error handler.
	 * 
	 * @return An error handler
	 */
	public ParseErrorHandler getParseErrorHandler() {
		return parseErrorHandler;
	}

	/**
	 * Print a tree.
	 * 
	 * @param ast The root node of the tree
	 * @param out the print stream
	 */
	public void showAst(final AST ast, final PrintStream out) {
		showAst(ast, new PrintWriter(out));
	}

	/**
	 * Print a tree.
	 * 
	 * @param ast The root node of the tree
	 * @param pw  the print writter
	 */
	private void showAst(final AST ast, final PrintWriter pw) {
		printer.showAst(ast, pw);
	}

	/**
	 * Initialize the error handler.
	 */
	private void initialize() {
		// Initialize the error handling delegate.
		parseErrorHandler = new ErrorCounter();
	}

	/**
	 * Handle panic of the parser.
	 */
	public static void panic() {
		throw new NotYetImplementedException("Replace QueryException of Hibernate to another kind of exception.");
	}
}
